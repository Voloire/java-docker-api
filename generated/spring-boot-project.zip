Here's a complete Spring Boot 3 REST API project scaffold (Java 17) that exposes a simple /hello endpoint and is ready for Dockerization:

pom.xml:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>hello-api</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>hello-api</name>
    <description>Hello API with Spring Boot 3</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

src/main/java/com/example/helloapi/HelloApiApplication.java:
```java
package com.example.helloapi;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HelloApiApplication {

    public static void main(String[] args) {
        SpringApplication.run(HelloApiApplication.class, args);
    }
}
```

src/main/java/com/example/helloapi/controller/HelloController.java:
```java
package com.example.helloapi.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @GetMapping("/hello")
    public String hello() {
        return "Hello, World!";
    }
}
```

src/main/resources/application.properties:
```properties
# Server port
server.port=8080

# Application name
spring.application.name=hello-api

# Logging level
logging.level.root=INFO
```

src/test/java/com/example/helloapi/HelloControllerTest.java:
```java
package com.example.helloapi;

import com.example.helloapi.controller.HelloController;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(HelloController.class)
public class HelloControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void testHelloEndpoint() throws Exception {
        mockMvc.perform(get("/hello"))
                .andExpect(status().isOk())
                .andExpect(content().string("Hello, World!"));
    }
}
```

Dockerfile:
```dockerfile
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY target/hello-api-0.0.1-SNAPSHOT.jar app.jar
EXPOSE 8080
ENTRYPOINT ["java", "-jar", "app.jar"]
```

.gitignore:
```
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
```

This project scaffold includes:

1. A `pom.xml` file for Maven build configuration.
2. The main application class `HelloApiApplication.java`.
3. A `HelloController.java` that exposes a simple `/hello` endpoint.
4. An `application.properties` file with basic configuration.
5. A unit test `HelloControllerTest.java` for the `HelloController`.
6. A `Dockerfile` for containerization.
7. A `.gitignore` file for version control.

To build and run the project:

1. Build the project: `mvn clean package`
2. Run the application: `java -jar target/hello-api-0.0.1-SNAPSHOT.jar`

To build and run the Docker container:

1. Build the Docker image: `docker build -t hello-api .`
2. Run the container: `docker run -p 8080:8080 hello-api`

The API will be accessible at `http://localhost:8080/hello`.

This scaffold follows Spring Boot 3 best practices, uses Java 17, and is ready for further development and Dockerization.